package com.yunlongstudio.algorithm.sort;

/**
 * 冒泡排序（Bubble Sort）是一种简单的排序算法。
 * 它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。
 * 走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。
 * 这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
 * 
 * 冒泡排序对n个项目需要O(n^2)的比较次数，且可以原地排序。尽管这个算法是最简单了解和实作的排序算法之一，
 * 但它对于少数元素之外的数列排序是很没有效率的。
 * 
 * 冒泡排序是与插入排序拥有相等的执行时间，但是两种法在需要的交换次数却很大地不同。
 * 在最坏的情况，冒泡排序需要O(n^2)次交换，而插入排序只要最多O(n)交换。
 * 冒泡排序的实现（类似下面）通常会对已经排序好的数列拙劣地执行（O(n^2)），而插入排序在这个例子只需要O(n)个运算。
 * 因此很多现代的算法教科书避免使用冒泡排序，而用插入排序取代之。冒泡排序如果能在内部循环第一次执行时，
 * 使用一个旗标来表示有无需要交换的可能，也有可能把最好的复杂度降低到O(n)。在这个情况，在已经排序好的数列就无交换的需要。
 * 若在每次走访数列时，把走访顺序和比较大小反过来，也可以稍微地改进效率。有时候称为往返排序，因为算法会从数列的一端到另一端之间穿梭往返。
 * 
 * 冒泡排序算法的运作如下：
 * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。
 * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。
 * 针对所有的元素重复以上的步骤，除了最后一个。
 * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。
 * 由于它的简洁，冒泡排序通常被用来对于程式设计入门的学生介绍算法的概念。
 * 
 **/

public class BubbleSort {

  public static void sort(int[] a) {
    for (int i = a.length - 1; i > 0; i--) {
      for (int j = 0; j < i; j++) {
        if (a[j + 1] < a[j]) {
          int temp = a[j];
          a[j] = a[j + 1];
          a[j + 1] = temp;
        }
      }
    }
  }

}
